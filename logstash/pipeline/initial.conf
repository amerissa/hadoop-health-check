input {
        exec {
              	command => '/utls/fsimage.sh'
                interval => 60
                codec => line
                type => fsimagecommand
             }
	 file {
                path => '/data/fsimage.csv'
                start_position => "beginning" 
                type => "fsimagedaily"
             }
}

filter {
if [type] == "fsimagedaily" {

	csv {
		separator => "|"
		columns => [ "HDFSPath", "replication", "ModificationTime", "AccessTime", "PreferredBlockSize", "BlocksCount", "FileSize", "NSQUOTA", "DSQUOTA", "permission", "user", "group" ]
		convert =>  {
                        'replication' => 'integer'
                        'PreferredBlockSize' => 'integer'
                        'BlocksCount' => 'integer'
			'FileSize' => 'integer'
			'NSQUOTA' => 'integer'
			'DSQUOTA' => 'integer'
				}
	    }
	date {
		match => ['ModificationTime', 'YYYY-MM-ddHH:mm']
		target => "modifyTime"
		remove_field => ['ModificationTime']
		}


        date {
              	match => ['AccessTime', 'YYYY-MM-ddHH:mm']
		target => "accessTime"
		remove_field => ['AccessTime']
                }

if ![BlocksCount] { drop {} }


if [BlocksCount] == 0 { drop {} }


ruby {
	code => "array = event.get('HDFSPath').split('/')
		 array.each do |i|
			index = 'HDFSDEPTH' + array.find_index(i).to_s
				if i.include? '.db'
					event.set('Database', i)
					tableindex = array.find_index(i) + 1
					table = array[tableindex]
					event.set('Table', table ) 
				end
			event.set(index, i)
		 end"
	remove_field => ['HDFSDEPTH0']
		 }
     }



     }


input {
        exec {
              	command => '/utls/yarn.py /utls/yarn.ini'
                interval => 60
                codec => json_lines
             }
}

filter {
if [type] == "yarnJobs" {
	mutate {
		convert => {
      'elapsedTime' => 'float'
      'memorySeconds' => 'integer'
      'vcoreSeconds' => 'integer'
			'progress' => 'float'
			'allocatedMB' => 'integer'
			'allocatedVCores' => 'integer'
			'runningContainers' => 'integer'
			'queueUsagePercentage' => 'float'
			'clusterUsagePercentage' => 'float'
			'preemptedResourceMB' => 'integer'
			'preemptedResourceVCores' => 'integer'
			'totalclusterusage' => 'float'

				}
	    }
	date {
		match => ["startedTime", "UNIX_MS"]
		target => "StartTime"
		remove_field => ["startedTime"]
             }
        date {
                match => ["finishedTime", "UNIX_MS"]
                target => "FinishTime"
                remove_field =>	["finishedTime"]
       	     }
			}
if [type] == "YARNaggregate" {
	mutate {
		convert => {
			'totalcpucores' => 'integer'
			'totalmemorymb' => 'integer'
			'totalcontainers' => 'integer' } } }

if [type] == "serviceMonitor" {
        mutate {
		convert => {
			'alertOccurrences' => 'integer'
			'alertID' => 'integer'
			   }
	    }
			      }
if [alertState] == "CRITICAL" and "process" in [componentName] {
	mutate {
		add_tag => ["RestartService"]
		}
								}
     }



output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}
